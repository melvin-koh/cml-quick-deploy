#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#  http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
---
- name: Get All services from CM
  uri:
    url: "{{ cloudera_manager_api_url }}/clusters/{{ cluster_name }}/services/"
    user: "{{ cloudera_manager_user }}"
    password: "{{ cloudera_manager_password }}"
    method: GET
    force_basic_auth: yes
    status_code: 200
    return_content: yes
    validate_certs: no
    body_format: json
  register: cloudera_manager_all_services

- set_fact:
    ranger_service_name: "{{ (cloudera_manager_all_services.json | json_query(query) | first) | default(None) }}"
  vars:
    query: "items[?type == 'RANGER'].name"

- name: DEBUG - ranger_service_name
  debug:
    msg: "{{ ranger_service_name }}"
  when: debug | default(false)


- name: Get CM deployment of services
  uri:
    url: "{{ cloudera_manager_url }}/api/v41/cm/deployment"
    user: "{{ cloudera_manager_user }}"
    password: "{{ cloudera_manager_password }}"
    method: GET
    force_basic_auth: yes
    status_code: 200
    return_content: yes
    validate_certs: no
    body_format: json
  register: cm_deployment_services

- set_fact:
    ranger_server: "{{ (cm_deployment_services.json | json_query(query) | first) | default(None) }}"
  vars:
    query: "clusters[?name == '{{ cluster_name }}' ].services[].roles[?type == 'RANGER_ADMIN'][].hostRef.hostname"

- name: DEBUG - Ranger Server 
  debug:
    msg: "{{ ranger_server }}"
  when: debug | default(false)


- name: Get Ranger full config
  uri:
    url: "{{ cloudera_manager_url }}/api/v41/clusters/{{ cluster_name }}/services/{{ ranger_service_name }}/config?view=full"
    user: "{{ cloudera_manager_user }}"
    password: "{{ cloudera_manager_password }}"
    method: GET
    force_basic_auth: yes
    status_code: 200
    return_content: yes
    validate_certs: no
    body_format: json
    dest: ~/response.json
  register: full_ranger_config

- name: Get Ranger Admin full config
  uri:
    url: "{{ cloudera_manager_url }}/api/v31/clusters/{{ cluster_name }}/services/{{ ranger_service_name }}/roleConfigGroups/{{ ranger_service_name }}-RANGER_ADMIN-BASE/config?view=full"
    user: "{{ cloudera_manager_user }}"
    password: "{{ cloudera_manager_password }}"
    method: GET
    force_basic_auth: yes
    status_code: 200
    return_content: yes
    validate_certs: no
    body_format: json
  register: full_ranger_admin_config


- set_fact:
    ranger_ssl: "{{ (full_ranger_admin_config.json | json_query(query) | first) | default(None) }}"
  vars:
    query: "items[?name == 'ssl_enabled'].value"

- set_fact:
    ranger_ssl: "{{ (full_ranger_admin_config.json | json_query(query) | first) | default(None) }}"
  vars:
    query: "items[?name == 'ssl_enabled'].default"
  when: ranger_ssl == ""

- name: DEBUG - ranger_ssl
  debug:
    msg: "{{ ranger_ssl }}"
  when: debug | default(false)


- set_fact:
    ranger_protocol: "{{ 'https' if ranger_ssl else 'http' }}"

- name: DEBUG - ranger_protocol
  debug:
    msg: "{{ ranger_protocol }}"
  when: debug | default(false)


- set_fact:
    ranger_port: "{{ (full_ranger_config.json | json_query(query) | first) | default(None) }}"
  vars:
    query: "items[?name == 'ranger_service_https_port'].value"
  when: ranger_ssl

- set_fact:
    ranger_port: "{{ (full_ranger_config.json | json_query(query) | first) | default(None) }}"
  vars:
    query: "items[?name == 'ranger_service_https_port'].default"
  when: ranger_ssl and ranger_port == ""

- set_fact:
    ranger_port: "{{ (full_ranger_config.json | json_query(query) | first) | default(None) }}"
  vars:
    query: "items[?name == 'ranger_service_http_port'].value"
  when: not ranger_ssl

- set_fact:
    ranger_port: "{{ (full_ranger_config.json | json_query(query) | first) | default(None) }}"
  vars:
    query: "items[?name == 'ranger_service_http_port'].default"
  when: not ranger_ssl and ranger_port == ""

- name: DEBUG - ranger_port
  debug:
    msg: "{{ ranger_port }}"
  when: debug | default(false)


- set_fact:
    ranger_url: "{{ ranger_protocol }}://{{ ranger_server }}:{{ ranger_port }}"

- name: DEBUG - ranger_url
  debug:
    msg: "{{ ranger_url }}"
  when: debug | default(false)

  
- name: Post Ranger policies declared in policies directory
  uri: 
    url: "{{ ranger_url }}/service/public/v2/api/policy"
    method: POST
    user: "{{ ranger_user }}"
    password: "{{ ranger_password }}"
    return_content: yes
    body: "{{ lookup('template', '{{ item.src }}' ) }}"
    body_format: json
    status_code: 200
    validate_certs: no
    force_basic_auth: yes
  with_filetree: "{{ role_path }}/policies"
  ignore_errors: yes
